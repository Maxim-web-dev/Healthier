import TelegramBot from 'node-telegram-bot-api'
import cors from 'cors'
import express from 'express'
// import path from 'path'
import fs from 'fs'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'
import axios from 'axios'

// import { getAccessToken } from './requests/getAccessToken.js'
// import { textRequest } from './requests/textRequest.js'
import { checkCompound } from './features/checkCompound.js'
import { getTextFromOCR } from './features/getTextFromOCR.js'
import dotenv from 'dotenv'

dotenv.config()

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// const pem = fs
// 	.readFileSync(path.resolve('./certs/russian_trusted_root_ca.cer'))
// 	.toString()
// process.env.NODE_EXTRA_CA_CERTS = pem
// process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'

const bot = new TelegramBot(process?.env?.BOT_TOKEN, { polling: true })

const app = express()
app.use(cors())
app.use(express.json())

app.listen(3000, () => {
	console.log(`Server running on port 3000`)
})

bot.on('message', async msg => {
	const chatId = msg.chat.id
	const text = msg.text
	try {
		if (text === '/start') {
			await bot.sendMessage(
				chatId,
				'*Healthier* - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–æ—Å—Ç–∞–≤ –∏–ª–∏ –µ–≥–æ —Ñ–æ—Ç–æ. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –æ—Ç–≤–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
				{
					reply_markup: { remove_keyboard: true },
					parse_mode: 'Markdown',
				}
			)
		} else if (text === '/info') {
			await bot.sendMessage(
				chatId,
				`ü§®*–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –≤—Ä–µ–¥–µ–Ω –ª–∏ –ø—Ä–æ–¥—É–∫—Ç?* - –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞.
				
üßê*–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ç—Ä–µ–Ω—É—é –¥–æ–±–∞–≤–∫—É?* - –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.

üòé*–•–æ—á–µ—à—å –±–æ–ª–µ–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã?* - /premium`,
				{ reply_markup: { remove_keyboard: true }, parse_mode: 'Markdown' }
			)
		} else if (text === '/premium') {
			await bot.sendMessage(chatId, '–ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç premium Healthier.')
		} else if (text === '/home') {
			await bot.sendMessage(
				chatId,
				`*–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å Healthier –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª?*

*1.* –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ
*2.* –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ 3 —Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
*3.* –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –¥–æ–º–æ–π'`,
				{
					reply_markup: {
						keyboard: [
							[
								{
									text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–æ–π',
									web_app: { url: 'https://atex-test.vercel.app/' },
								},
							],
						],
						resize_keyboard: true,
					},
					parse_mode: 'Markdown',
				}
			)

			// // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			// bot.once('message', nextMsg => {
			// 	if (nextMsg.chat.id === chatId) {
			// 		// –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
			// 		bot.sendMessage(chatId, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞.', {
			// 			reply_markup: {
			// 				remove_keyboard: true,
			// 			},
			// 		})
			// 	}
			// })
		}
	} catch (error) {
		console.log(error)
	}
})

bot.on('photo', async msg => {
	const chatId = msg.chat.id
	const photo = msg.photo
	const photoId = photo[photo.length - 1].file_id
	try {
		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		const photoUrl = await bot.getFileLink(photoId)
		const response = await axios.get(photoUrl, { responseType: 'arraybuffer' })
		const fileName =
			Math.random().toString(36).substr(2, 9) + Date.now().toString(36) + '.jpg'
		const savePath = join(__dirname, 'downloads', fileName)
		fs.writeFileSync(savePath, response.data)

		// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Ä–µ–¥–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
		const text = await getTextFromOCR(fileName)
		const result = checkCompound(text)

		// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat
		// const accessToken = await getAccessToken()
		// const finalAnswer = await textRequest(result, accessToken)
		// const photo = await uploadFile(accessToken)
		// const answer = await photoRequest(photo, accessToken)

		// console.log(answer);

		await bot.sendMessage(chatId, result, {
			parse_mode: 'Markdown',
			reply_markup: { remove_keyboard: true },
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error)
		await bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ.')
	}
})
